{"version":3,"sources":["actions/weatherActions.js","cmps/MsgModal.jsx","cmps/AppHeader.jsx","services/storageService.js","services/weatherService.js","cmps/CitySearch.jsx","cmps/WeatherPreview.jsx","cmps/WeatherList.jsx","pages/ForecastPage.jsx","cmps/FavoritPreview.jsx","cmps/FavoritList.jsx","pages/FavoritCities.jsx","cmps/AppFooter.jsx","App.js","reportWebVitals.js","reducers/weatherReducer.js","index.js"],"names":["setCity","cityKey","dispatch","type","err","errorMsg","msg","console","log","MsgModal","onCloseModal","className","onClick","AppHeader","useSelector","state","weatherModule","darkMod","error","useState","isDark","setIsDark","C_or_F","setC_or_F","useDispatch","useEffect","degree","setIsDarkMod","onSetIsDark","document","querySelector","classList","remove","add","to","storageService","loadFromStorage","key","val","localStorage","getItem","JSON","parse","saveToStorage","stringify","weatherService","save","cityId","idx","gCitys","findIndex","city","_id","splice","STORAGE_KEY","Promise","resolve","Error","loadCities","searchCityByCityKey","searchCityAutoComplete","getCityCurrentCondition","get5DayForeCast","getLatLanCoor","API_KEY","BASE_URL","cityName","a","cityCurrentCondition","cityToSave","_makeId","name","push","reject","searchTerm","fetch","response","ok","message","status","json","cities","correntCondition","isC","metric","forecast5day","lat","lon","length","text","possible","i","charAt","Math","floor","random","CitySearch","onSearch","onGetCityForecast","cityInput","setCities","optionalCities","onSetCity","ev","target","value","list","onChange","placeholder","id","map","LocalizedName","Key","WeatherPreview","min","max","day","isDarkMode","year","Date","substr","month","dateDey","getDate","Temperature","Minimum","Value","Maximum","Day","IconPhrase","src","process","Icon","alt","Night","WeatherList","forecast","Card","variant","EpochDate","ForecastPage","setForecast","currentForecast","setCurrentForecast","favorits","setFavorits","setcityName","navigator","geolocation","getCurrentPosition","success","navigatorError","favoritCities","pos","coords","latitude","longitude","forecast5Day","DailyForecasts","WeatherText","WeatherIcon","Metric","Imperial","some","onAddToFavorits","FavoritPreview","favoritCity","onDeleteCity","temp","setTemp","unit","setUnit","getTemp","getUnit","Unit","preventDefault","removeCity","FavoritList","FavoritCities","setFavoritCities","AppFooter","App","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","rootReducer","combineReducers","action","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","getElementById"],"mappings":"6NAAO,SAASA,EAAQC,GACpB,OAAO,SAAAC,GACH,IACIA,EAAS,CAAEC,KAAM,WAAYF,YAC/B,MAAOG,GACLF,EAAS,CAAEC,KAAM,QAASC,UAuB/B,SAASC,EAASC,GACrB,OAAO,SAAAJ,GACH,IACIA,EAAS,CAAEC,KAAM,QAASG,QAC5B,MAAOF,GACLG,QAAQC,IAAI,qBAAsBJ,K,WC/BjCK,EAAW,SAAC,GAA2B,IAAzBH,EAAwB,EAAxBA,IAAKI,EAAmB,EAAnBA,aAE5B,OACI,qBAAKC,UAAU,YAAf,SACI,0BAASA,UAAU,qDAAnB,UACKL,EACD,uBACA,wBAAQH,KAAK,qBAAqBS,QAASF,EAA3C,yBCHT,SAASG,IACZ,MAA2BC,aAAY,SAAAC,GAAK,OAAIA,EAAMC,iBAA9CC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MACjB,EAA4BC,oBAAS,GAArC,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAA4BF,mBAAS,UAArC,mBAAOG,EAAP,KAAeC,EAAf,KAEMrB,EAAWsB,cAEjBC,qBAAU,WFKP,IAAmBC,EEJlBxB,GFIkBwB,EEJCJ,EFKhB,SAAApB,GACH,IACIA,EAAS,CAAEC,KAAM,aAAcuB,WACjC,MAAOtB,GACLF,EAAS,CAAEC,KAAM,QAASC,cER/B,CAACkB,IACJG,qBAAU,WACNvB,EFRD,SAAsBkB,GACzB,OAAO,SAAAlB,GACH,IACIA,EAAS,CAAEC,KAAM,cAAeiB,WAClC,MAAOhB,GACLF,EAAS,CAAEC,KAAM,QAASC,UEGrBuB,CAAaP,MACvB,CAACA,IAEJ,IAGMQ,EAAc,WACZR,EACAS,SAASC,cAAc,gBAAgBC,UAAUC,OAAO,QAExDH,SAASC,cAAc,gBAAgBC,UAAUE,IAAI,QAEzDZ,GAAWD,IAKf,OACI,yBAAQT,UAdDM,EAAU,8BAAgC,yBAcjD,UACI,sBAAKN,UAAU,8BAAf,UAEKS,EAAS,wBAAQR,QAASgB,EAAjB,0BACN,wBAAQhB,QAASgB,EAAjB,yBACJ,wBAAQhB,QATD,WACIW,EAAP,WAAXD,EAA4B,SAAiB,WAQtC,SAA8BA,IAC9B,sBAAKX,UAAU,2BAAf,UACI,cAAC,IAAD,CAAMuB,GAAG,IAAT,yBACA,cAAC,IAAD,CAAMA,GAAG,iBAAT,kCAGPhB,GAAS,cAAC,EAAD,CAAUZ,IAAKY,O,2BCpC9B,IAAMiB,EAAiB,CAC1BC,gBAXJ,SAAyBC,GACrB,IAAIC,EAAMC,aAAaC,QAAQH,GAC/B,OAAQC,EAAOG,KAAKC,MAAMJ,GAAO,MAUjCK,cAPJ,SAAuBN,EAAKC,GACxBC,aAAaF,GAAOI,KAAKG,UAAUN,KCJ1BO,EAAiB,CAC1BC,K,8CACAd,OA+BJ,SAAgBe,GACZ,IACI,IAAMC,EAAMC,EAAOC,WAAU,SAAAC,GAAI,OAAIA,EAAKC,MAAQL,KAGlD,OAFAE,EAAOI,OAAOL,EAAK,GACnBb,EAAeQ,cAAcW,EAAaL,GACnCM,QAAQC,UACjB,MAAOpD,GAEL,MAAM,IAAIqD,MADErD,KArChBsD,WAyCJ,WACI,IAEI,OADevB,EAAeC,gBAAgBkB,IAAc,GAE9D,MAAOlD,GAEL,MAAM,IAAIqD,MADErD,KA7ChBuD,oB,4CACAC,uB,4CACAC,wB,4CACAC,gB,8CACAC,c,+CAGET,EAAc,SACdU,EAAU,mCACVC,EAAW,qCACXhB,EAAS,G,4CAEf,WAAoBhD,EAASiE,GAA7B,mBAAAC,EAAA,+EAE2CtB,EAAegB,wBAAwB5D,GAFlF,cAEcmE,EAFd,OAGcC,EAAa,CACfjB,IAAKkB,IACLC,KAAML,EACNE,uBACAnE,WAEJgD,EAAOuB,KAAKH,GACZlC,EAAeQ,cAAcW,EAAaL,GAVlD,kBAWeM,QAAQC,QAAQa,IAX/B,yCAac/D,EAbd,uBAceiD,QAAQkB,OAAOnE,IAd9B,2D,kEAqCA,WAAsCoE,GAAtC,qBAAAP,EAAA,+EAE6BQ,MAAM,GAAD,OAAIV,EAAJ,oDAAwDD,EAAxD,cAAqEU,IAFvG,WAEYE,EAFZ,QAGsBC,GAHtB,sBAIkBC,EAJlB,gCAIqDF,EAASG,QAC5C,IAAItB,MAAMqB,GAL5B,uBAO6BF,EAASI,OAPtC,cAOcC,EAPd,yBAQeA,GARf,kCAUc3E,EAAO,KAAIwE,QACjBvB,QAAQkB,OAAOnE,GAXvB,2D,kEAcA,WAAmCL,GAAnC,qBAAAkE,EAAA,+EAE6BQ,MAAM,GAAD,OAAIV,EAAJ,yBAA6BhE,EAA7B,mBAA+C+D,IAFjF,WAEYY,EAFZ,QAGsBC,GAHtB,sBAIkBC,EAJlB,gCAIqDF,EAASG,QAC5C,IAAItB,MAAMqB,GAL5B,uBAO2BF,EAASI,OAPpC,cAOc7B,EAPd,yBAQeA,GARf,kCAUc7C,EAAO,KAAIwE,QACjBvB,QAAQkB,OAAOnE,GAXvB,2D,kEAeA,WAAuCL,GAAvC,qBAAAkE,EAAA,+EAE6BQ,MAAM,GAAD,OAAIV,EAAJ,iCAAqChE,EAArC,mBAAuD+D,EAAvD,mBAFlC,WAEYY,EAFZ,QAGsBC,GAHtB,sBAIkBC,EAJlB,gCAIqDF,EAASG,QAC5C,IAAItB,MAAMqB,GAL5B,uBAOuCF,EAASI,OAPhD,cAOcE,EAPd,yBAQeA,GARf,kCAUc5E,EAAO,KAAIwE,QACjBvB,QAAQkB,OAAOnE,GAXvB,2D,kEAeA,WAA+BL,EAASkF,GAAxC,uBAAAhB,EAAA,6DACUiB,EAAS,WACX,MAAe,WAARD,GAFf,kBAK6BR,MAAM,GAAD,OAAIV,EAAJ,oCAAwChE,EAAxC,mBAA0D+D,EAA1D,mBAA4EoB,MAL9G,WAKYR,EALZ,QAMsBC,GANtB,sBAOkBC,EAPlB,gCAOqDF,EAASG,QAC5C,IAAItB,MAAMqB,GAR5B,wBAUmCF,EAASI,OAV5C,eAUcK,EAVd,yBAWeA,GAXf,kCAac/E,EAAO,KAAIwE,QACjBvB,QAAQkB,OAAOnE,GAdvB,2D,kEAkBA,WAA6BgF,EAAKC,GAAlC,qBAAApB,EAAA,+EAE+BQ,MAAM,GAAD,OAAIV,EAAJ,0DAA8DD,EAA9D,cAA2EsB,EAA3E,YAAkFC,IAFtH,WAEcX,EAFd,QAGsBC,GAHtB,sBAIkBC,EAJlB,gCAIqDF,EAASG,QAC5C,IAAItB,MAAMqB,GAL5B,uBAO2BF,EAASI,OAPpC,cAOc7B,EAPd,yBAQeA,GARf,kCAUc7C,EAAO,KAAIwE,QACjBvB,QAAQkB,OAAOnE,GAXvB,2D,sBAgBA,SAASgE,IAGL,IAH0B,IAAbkB,EAAY,uDAAH,EAClBC,EAAO,GACPC,EAAW,iEACNC,EAAI,EAAGA,EAAIH,EAAQG,IACxBF,GAAQC,EAASE,OAAOC,KAAKC,MAAMD,KAAKE,SAAWL,EAASF,SAEhE,OAAOC,ECzIJ,IAAMO,EAAa,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,SAAUC,EAAwB,EAAxBA,kBACnC,EAA6B/E,mBAAS,IAAtC,mBAAOgF,EAAP,KAAkBnG,EAAlB,KACA,EAA4BmB,mBAAS,MAArC,mBAAO8D,EAAP,KAAemB,EAAf,KAGA3E,oBAAS,sBAAC,4BAAA0C,EAAA,sEACuB8B,EAASE,GADhC,OACAE,EADA,OAEND,EAAUC,GAFJ,2CAGP,CAACF,IAEJ,IAAMG,EAAS,uCAAG,WAAOC,GAAP,SAAApC,EAAA,sDACdnE,EAAQuG,EAAGC,OAAOC,OADJ,2CAAH,sDAOf,OACI,sBAAK9F,UAAU,+CAAf,UACI,uBAAOR,KAAK,OAAOuG,KAAK,SAASC,SAAUL,EAAW/B,KAAK,YACvDkC,MAAON,EAAWS,YAAY,gBACjC3B,GAAU,0BAAU4B,GAAG,SAAb,SACN5B,EAAO6B,KAAI,SAAC3D,GAET,OADUA,EAAKd,IACR,wBAAuBoE,MAAOtD,EAAK4D,eAAtB5D,EAAK6D,UAIjC,wBAAQpG,QAfQ,WACpBL,QAAQC,IAAI,SAAUyE,GACtBiB,EAAkBjB,EAAO,GAAG+B,MAaxB,wB,QC5BL,SAASC,EAAT,GAAsD,IAExCC,EAAKC,EAFOC,EAA2B,EAA3BA,IAAK1F,EAAsB,EAAtBA,OAAQ2F,EAAc,EAAdA,WAc1C,OACI,sBAAK1G,UAAS,0BAAqB0G,IAArB,4CAAd,UACI,+BAVQ,WACZ,IAAMC,EAAOF,EAAIG,KAAKC,OAAO,EAAG,GAC1BC,EAAQL,EAAIG,KAAKC,OAAO,EAAG,GAC3BE,EAAUN,EAAIG,KAAKC,OAAO,EAAG,GAEnC,MADU,UAAME,EAAN,YAAiBD,EAAjB,YAA0BH,GAMzBK,KACP,uBACA,gCACI,gCAjBKT,EAkBQE,EAAIQ,YAAYC,QAAQC,MAlB3BX,EAkBkCC,EAAIQ,YAAYG,QAAQD,OAjB5D,IAAMZ,EAAMC,GAAO,GACpBK,OAAO,EAAG,MAiBjB,+BAAO9F,OAEX,sBAAKf,UAAU,0CAAf,UACKyG,EAAIY,IAAIC,WACT,qBAAKC,IAAKC,sBAAA,kBAAoCf,EAAIY,IAAII,KAA5C,QAAwDC,IAAI,gBAE1E,sBAAK1H,UAAU,0CAAf,UACKyG,EAAIkB,MAAML,WACX,qBAAKC,IAAKC,sBAAA,kBAAoCf,EAAIkB,MAAMF,KAA9C,QAA0DC,IAAI,qBC3BjF,IAAME,EAAc,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,SAAU9G,EAAyB,EAAzBA,OAAQ2F,EAAiB,EAAjBA,WAE5C,OACI,qBAAK1G,UAAU,iDAAf,SACK6H,EAAS1B,KAAI,SAAAM,GACV,OAAO,cAACqB,EAAA,EAAD,CAA0BC,QAAQ,WAAW/H,UAAU,uBAAvD,SACH,cAACsG,EAAD,CAAgBG,IAAKA,EAAK1F,OAAQA,EAAQ2F,WAAYA,KADxCD,EAAIuB,iBCFzBC,EAAe,WACxB,IAMI7F,EANJ,EAA4CjC,aAAY,SAAAC,GAAK,OAAIA,EAAMC,iBAA/Df,EAAR,EAAQA,QAASgB,EAAjB,EAAiBA,QAASS,EAA1B,EAA0BA,OAAQR,EAAlC,EAAkCA,MAClC,EAAgCC,mBAAS,IAAzC,mBAAOqH,EAAP,KAAiBK,EAAjB,KACA,EAA8C1H,mBAAS,IAAvD,mBAAO2H,EAAP,KAAwBC,EAAxB,KACA,EAAgC5H,mBAAS,IAAzC,mBAAO6H,EAAP,KAAiBC,EAAjB,KACA,EAAgC9H,mBAAS,IAAzC,mBAAO+C,EAAP,KAAiBgF,EAAjB,KACMhJ,EAAWsB,cAEjBC,qBAAU,WACN,GAAgB,KAAZxB,EACAkJ,UAAUC,YAAYC,mBAAmBC,EAASC,QAElD,IACIrD,EAAkBjG,GACpB,MAAOG,GACLF,EAASG,EAASD,OAG3B,IACHqB,oBAAS,sBAAC,4BAAA0C,EAAA,+EAE0BtB,EAAea,aAFzC,OAEI8F,EAFJ,OAGFP,EAAYO,GAHV,gDAKFtJ,EAASG,EAAS,EAAD,KALf,yDAOR,IAEF,IAAMiJ,EAAO,uCAAG,WAAOG,GAAP,mBAAAtF,EAAA,sEAEFmB,EAAMmE,EAAIC,OAAOC,SACjBpE,EAAMkE,EAAIC,OAAOE,UAHf,SAIW/G,EAAekB,cAAcuB,EAAKC,GAJ7C,cAIFpC,EAJE,OAKRjD,EAASF,EAAQmD,EAAKlD,UACtBiJ,EAAY/F,EAAK4D,eANT,UAOFb,EAAkB/C,EAAK6D,KAPrB,0DASR9G,EAASG,EAAS,EAAD,KATT,0DAAH,sDAYPkJ,EAAiB,WACnB,IACIrJ,EAASF,EAAQ,WACjBE,EAASG,EAAS,uCACpB,MAAOD,GACLF,EAASG,EAASD,MAGpBiH,EAAa,WACf,OAAOpG,EAAU,OAAS,IAExBgF,EAAQ,uCAAG,WAAOvB,GAAP,SAAAP,EAAA,+EAEItB,EAAee,uBAAuBc,GAF1C,wEAITxE,EAASG,EAAS,EAAD,KAJR,wDAAH,sDAOR6F,EAAiB,uCAAG,WAAOjG,GAAP,mBAAAkE,EAAA,sEAElBjE,EAASF,EAAQC,IAFC,SAGS4C,EAAeiB,gBAAgB7D,EAASyB,GAHjD,cAGZmI,EAHY,gBAIYhH,EAAegB,wBAAwB5D,GAJnD,cAIZ6I,EAJY,iBAKCjG,EAAec,oBAAoB1D,GALpC,QAKZkD,EALY,OAMlB4F,EAAmBD,EAAgB,IACnCD,EAAYgB,EAAaC,gBACzBZ,EAAY/F,EAAK4D,eARC,kDAUlB7G,EAASG,EAAS,EAAD,KAVC,0DAAH,sDA+CvB,OACI,0BAASM,UAAU,cAAnB,UACI,sBAAKA,UAAS,wBAAmB0G,IAAnB,4CAAd,UAEI,cAAC,EAAD,CAAYpB,SAAUA,EAAUC,kBAAmBA,IAClDhC,GAAY,6BAAKA,IACjB4E,GAAmB,+BAAOA,EAAgBiB,cAC3C,+BAAM,qBAAK7B,IAAKC,sBAAA,kBAAoCW,EAAgBkB,YAApD,QAAuE3B,IAAI,6BAC1FG,GAAY,uBAAM7H,UAAU,eAAhB,UAzCN,WAAXe,EACOoH,EAAgBlB,YAAYqC,OAAOnC,MAEnCgB,EAAgBlB,YAAYsC,SAASpC,MAsCgBpG,KACvD8G,GAAY,cAAC,EAAD,CAAaA,SAAUA,EAChCnB,WAAYA,EAAY3F,OAAQA,EAAQT,QAASA,IApBxD+H,GAAgC,IAApBA,EAASxD,QACnBwD,EAASmB,MAAK,SAAAhH,GAEjB,OADAJ,EAASI,EAAKC,IACPD,EAAKlD,UAAYA,KAmBL,wBAAQU,UAAU,0BAC7BC,QAhCK,WACjB,IACIiC,EAAeb,OAAOe,GACtB7C,EAASG,EAAS,iBACpB,MAAOD,GACLF,EAASG,EAASD,MA0BC,uCAET,wBAAQO,UAAU,qBAChBC,QAAS,kBA1CL,WACpB,IACIiC,EAAeC,KAAK7C,EAASiE,GAC7BhE,EAASG,EAAS,2BACpB,MAAMD,GACJF,EAASG,EAASD,KAqCSgK,IADjB,sCAGTlJ,GAAS,cAAC,EAAD,CAAUZ,IAAKY,EAAOR,aArBnB,WACjBR,EAASG,EAAS,YC1GnB,SAASgK,EAAT,GAAuF,IAA7DC,EAA4D,EAA5DA,YAAaC,EAA+C,EAA/CA,aAAcjE,EAAiC,EAAjCA,UAAWe,EAAsB,EAAtBA,WAAY3F,EAAU,EAAVA,OAE/E,EAAwBP,mBAAS,IAAjC,mBAAOqJ,EAAP,KAAaC,EAAb,KACA,EAAwBtJ,mBAAS,IAAjC,mBAAOuJ,EAAP,KAAaC,EAAb,KAEAlJ,qBAAU,WACNgJ,EAAQG,KACRD,EAAQE,OACT,CAACnJ,IAEJ,IAOMkJ,EAAU,WACZ,MAAe,WAAXlJ,EACO4I,EAAYlG,qBAAqB,GAAGwD,YAAYqC,OAAOnC,MAEvDwC,EAAYlG,qBAAqB,GAAGwD,YAAYsC,SAASpC,OAGlE+C,EAAU,WACZ,MAAkB,WAAXnJ,EAAiB4I,EAAYlG,qBAAqB,GAAGwD,YAAYqC,OAAOa,KAC3ER,EAAYlG,qBAAqB,GAAGwD,YAAYsC,SAASY,MAEjE,OACI,qBAAKnK,UAAS,0BAAqB0G,IAArB,4CAA6EzG,QAnBxE,WACnB0F,EAAUgE,EAAYrK,UAkBtB,SACI,eAAC,IAAD,CAAMiC,GAAG,IAAIvB,UAAU,uBAAvB,UACI,oBAAIA,UAAS,6BAAwB0G,KAArC,SAAsDiD,EAAY/F,OAClE,sBAAK5D,UAAU,kEAAf,UACI,uBAAMA,UAAS,+BAA0B0G,KAAzC,UACKmD,GAAQ,+BAAOA,IAAcA,GAAQ,+BAAOE,OAEjD,uBAAM/J,UAAS,+BAA0B0G,IAA1B,4CAAf,UACKiD,EAAYlG,qBAAqB,GAAG2F,YACrC,qBACI7B,IAAKC,sBAAA,kBAAoCmC,EAAYlG,qBAAqB,GAAG4F,YAAxE,QACL3B,IAAI,8BAEZ,wBAAQ1H,UAAU,aAAaC,QAAS,SAAC2F,GAAD,OA7BrC,SAACA,GAChBA,EAAGwE,iBACHR,EAAaD,EAAYlH,KA2BmC4H,CAAWzE,IAA3D,iCCzCb,IAAM0E,EAAc,SAAC,GAA6E,IAA3EzB,EAA0E,EAA1EA,cAAee,EAA2D,EAA3DA,aAAcjE,EAA6C,EAA7CA,UAAWe,EAAkC,EAAlCA,WAAY3F,EAAsB,EAAtBA,OAAQT,EAAc,EAAdA,QACtF,OAAKuI,GAA0C,IAAzBA,EAAchE,OAEhC,qBAAK7E,UAAU,gDAAf,SACK6I,EAAc1C,KAAI,SAAAwD,GACf,OAAO,cAAC7B,EAAA,EAAD,CAA4BC,QAAQ,WAApC,SACH,cAAE2B,EAAF,CAAiBC,YAAaA,EAC1BC,aAAcA,EAAcjE,UAAWA,EACvCe,WAAYA,EAAY3F,OAAQA,EAAQT,QAASA,KAHvCqJ,EAAYlH,UAJe,8DCEhD8H,EAAgB,WACzB,MAAmCpK,aAAY,SAAAC,GAAK,OAAIA,EAAMC,iBAAtDC,EAAR,EAAQA,QAASS,EAAjB,EAAiBA,OAAQR,EAAzB,EAAyBA,MACzB,EAA0CC,mBAAS,IAAnD,mBAAOqI,EAAP,KAAsB2B,EAAtB,KACMjL,EAAWsB,cAEjBC,oBAAS,sBAAC,4BAAA0C,EAAA,+EAEmBtB,EAAea,aAFlC,OAEIuB,EAFJ,OAGFkG,EAAiBlG,GAHf,gDAKF/E,EAASG,EAAS,EAAD,KALf,yDAOP,CAACa,IAEJ,IAAMmG,EAAa,WACf,OAAOpG,EAAU,OAAS,IAsB9B,OACI,8BACI,0BAASN,UAAU,cAAnB,UACI,qBAAKA,UAAS,uBAAkB0G,IAAlB,gBAAd,SACKmC,GACG,cAAC,EAAD,CACIA,cAAeA,EACfe,aA3BF,SAAAxH,GAClB,IACIF,EAAeb,OAAOe,GACtB,IAAMkC,EAASpC,EAAea,aAC9ByH,EAAiBlG,GACjB/E,EAASG,EAAS,iBACpB,MAAOD,GACLF,EAASG,EAASD,MAqBFkG,UAlBN,SAACrG,GACf,IACIC,EAASF,EAAQC,IACnB,MAAOG,GACLF,EAASG,EAASD,MAeFiH,WAAYA,EACZ3F,OAAQA,EACRT,QAASA,MAGpBC,GAAS,cAAC,EAAD,CAAUZ,IAAKY,EAAOR,aAjBvB,WACjBR,EAASG,EAAS,cCvCnB,SAAS+K,IACd,IAAQnK,EAAYH,aAAY,SAAAC,GAAK,OAAIA,EAAMC,iBAAvCC,QAIR,OACE,wBAAQN,UAHDM,EAAU,mDAAqD,8CAGtE,SACE,qBAAKN,UAAU,mCAAf,iCCHC,IAAM0K,EAAM,WACjB,OACE,sBAAK1K,UAAU,cAAf,UACE,cAACE,EAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOyK,KAAK,iBAAiBC,UAAWL,IACxC,cAAC,IAAD,CAAOI,KAAK,IAAIC,UAAW3C,OAE7B,cAACwC,EAAD,QCHSI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,wBCNRQ,EAAe,CACjBhM,QAAS,GACTiB,MAAO,GACPD,SAAQ,EACRS,OAAO,UCOX,IAAMwK,EAAcC,YAAgB,CAClCnL,cDLK,WAAuD,IAA/BD,EAA8B,uDAAtBkL,EAAcG,EAAQ,uCACzD,OAAQA,EAAOjM,MACX,IAAK,WACD,OAAO,2BACAY,GADP,IAEId,QAASmM,EAAOnM,UAExB,IAAK,cACD,OAAO,2BACAc,GADP,IAEIE,QAASmL,EAAOhL,SAExB,IAAK,aACD,OAAO,2BACAL,GADP,IAEIW,OAAQ0K,EAAO1K,SAEvB,IAAK,QACD,OAAO,2BACAX,GADP,IAEIG,MAAOkL,EAAO9L,MAEtB,QACI,OAAOS,MCdbsL,EAAmBC,OAAOC,sCAAwCC,IAClEC,EAAQC,YAAYR,EAAaG,EAAiBM,YAAgBC,OAExEC,IAASC,OACP,cAAC,IAAD,CAAUL,MAAOA,EAAjB,SACE,cAAC,IAAD,UACE,cAAC,EAAD,QAGJ5K,SAASkL,eAAe,SAM1BvB,M","file":"static/js/main.730c2db0.chunk.js","sourcesContent":["export function setCity(cityKey) {\r\n    return dispatch => {\r\n        try {\r\n            dispatch({ type: 'SET_CITY', cityKey })\r\n        } catch (err) {\r\n            dispatch({ type: 'ERROR', err })\r\n        }\r\n    }\r\n}\r\nexport function setIsDarkMod(isDark) {\r\n    return dispatch => {\r\n        try {\r\n            dispatch({ type: 'SET_DARKMOD', isDark })\r\n        } catch (err) {\r\n            dispatch({ type: 'ERROR', err })\r\n        }\r\n    }\r\n}\r\nexport function setDegree(degree) {\r\n    return dispatch => {\r\n        try {\r\n            dispatch({ type: 'SET_DEGREE', degree })\r\n        } catch (err) {\r\n            dispatch({ type: 'ERROR', err })\r\n        }\r\n    }\r\n}\r\n\r\nexport function errorMsg(msg) {\r\n    return dispatch => {\r\n        try {\r\n            dispatch({ type: 'ERROR', msg })\r\n        } catch (err) {\r\n            console.log('there was an error', err);\r\n        }\r\n    }\r\n}","import React from \"react\";\r\n\r\nexport const MsgModal = ({ msg, onCloseModal }) => {\r\n\r\n    return (\r\n        <div className=\"msg-modal\">\r\n            <section className=\"modal-main flex column justify-center align-center\">\r\n                {msg}\r\n                <br/>\r\n                <button type=\"close-modal-button\" onClick={onCloseModal}>\r\n                    Close\r\n                </button>\r\n            </section>\r\n        </div>\r\n    );\r\n};","import React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { setDegree, setIsDarkMod } from '../actions/weatherActions'\r\nimport { MsgModal } from './MsgModal'\r\n\r\nexport function AppHeader() {\r\n    const { darkMod, error } = useSelector(state => state.weatherModule)\r\n    const [isDark, setIsDark] = useState(false)\r\n    const [C_or_F, setC_or_F] = useState('℃')\r\n    // const history = useHistory()\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(setDegree(C_or_F))\r\n    }, [C_or_F])\r\n    useEffect(() => {\r\n        dispatch(setIsDarkMod(isDark))\r\n    }, [isDark])\r\n\r\n    const setClassName = () => {\r\n        return darkMod ? 'main-layout app-header dark' : 'main-layout app-header'\r\n    }\r\n    const onSetIsDark = () => {\r\n        if (isDark) {\r\n            document.querySelector('.weather-app').classList.remove('dark')\r\n        } else {\r\n            document.querySelector('.weather-app').classList.add('dark')\r\n        }\r\n        setIsDark(!isDark)\r\n    }\r\n    const degreeType = () => {\r\n        (C_or_F === '℃') ? setC_or_F('℉') : setC_or_F('℃')\r\n    }\r\n    return (\r\n        <header className={setClassName()}>\r\n            <nav className=\"main-nav flex space-between\">\r\n                {/* <button onClick={() => history.goBack()}>Back</button> */}\r\n                {isDark ? <button onClick={onSetIsDark}>Toggle light</button> :\r\n                    <button onClick={onSetIsDark}>Toggle Dark</button>}\r\n                <button onClick={degreeType}>{C_or_F}</button>\r\n                <div className=\"links flex space-between\">\r\n                    <Link to='/'>weather app</Link>\r\n                    <Link to='/favoritCities'>favorit cities</Link>\r\n                </div>\r\n            </nav>\r\n            {error && <MsgModal msg={error} />}\r\n        </header>\r\n    )\r\n}","function loadFromStorage(key) {\r\n    var val = localStorage.getItem(key)\r\n    return (val) ? JSON.parse(val) : null;\r\n}\r\n\r\nfunction saveToStorage(key, val) {\r\n    localStorage[key] = JSON.stringify(val);\r\n}\r\n\r\n\r\nexport const storageService = {\r\n    loadFromStorage,\r\n    saveToStorage\r\n}","import { storageService } from './storageService.js'\r\n\r\nexport const weatherService = {\r\n    save,\r\n    remove,\r\n    loadCities,\r\n    searchCityByCityKey,\r\n    searchCityAutoComplete,\r\n    getCityCurrentCondition,\r\n    get5DayForeCast,\r\n    getLatLanCoor\r\n}\r\n\r\nconst STORAGE_KEY = 'cities'\r\nconst API_KEY = 'BmFV9KHIUx2TcW2wwfyb8GWT1lOc5i2L'\r\nconst BASE_URL = 'http://dataservice.accuweather.com'\r\nconst gCitys = []\r\n\r\nasync function save(cityKey, cityName) {\r\n    try {\r\n        const cityCurrentCondition = await weatherService.getCityCurrentCondition(cityKey)\r\n        const cityToSave = {\r\n            _id: _makeId(),\r\n            name: cityName,\r\n            cityCurrentCondition,\r\n            cityKey\r\n        }\r\n        gCitys.push(cityToSave)\r\n        storageService.saveToStorage(STORAGE_KEY, gCitys)\r\n        return Promise.resolve(cityToSave);\r\n    } catch (err) {\r\n        const msg = err\r\n        return Promise.reject(msg)\r\n    }\r\n}\r\nfunction remove(cityId) {\r\n    try {\r\n        const idx = gCitys.findIndex(city => city._id === cityId)\r\n        gCitys.splice(idx, 1)\r\n        storageService.saveToStorage(STORAGE_KEY, gCitys)\r\n        return Promise.resolve();\r\n    } catch (err) {\r\n        const msg = err\r\n        throw new Error(msg)\r\n    }\r\n}\r\nfunction loadCities() {\r\n    try {\r\n        const cities = storageService.loadFromStorage(STORAGE_KEY)||[]\r\n        return cities;\r\n    } catch (err) {\r\n        const msg = err\r\n        throw new Error(msg)\r\n    }\r\n}\r\nasync function searchCityAutoComplete(searchTerm) {\r\n    try {\r\n        let response = await fetch(`${BASE_URL}/locations/v1/cities/autocomplete?apikey=${API_KEY}&q=${searchTerm}`)\r\n        if (!response.ok) {\r\n            const message = `An error has occured: ${response.status}`;\r\n            throw new Error(message);\r\n        }\r\n        const cities = await response.json()\r\n        return cities\r\n    } catch (err) {\r\n        const msg = (err.message);\r\n        Promise.reject(msg)\r\n    }\r\n}\r\nasync function searchCityByCityKey(cityKey) {\r\n    try {\r\n        let response = await fetch(`${BASE_URL}/locations/v1/${cityKey}?apikey=${API_KEY}`)\r\n        if (!response.ok) {\r\n            const message = `An error has occured: ${response.status}`;\r\n            throw new Error(message);\r\n        }\r\n        const city = await response.json()\r\n        return city\r\n    } catch (err) {\r\n        const msg = (err.message)\r\n        Promise.reject(msg)\r\n    }\r\n}\r\n\r\nasync function getCityCurrentCondition(cityKey) {\r\n    try {\r\n        let response = await fetch(`${BASE_URL}/currentconditions/v1/${cityKey}?apikey=${API_KEY}&details=false`)\r\n        if (!response.ok) {\r\n            const message = `An error has occured: ${response.status}`;\r\n            throw new Error(message);\r\n        }\r\n        const correntCondition = await response.json()\r\n        return correntCondition\r\n    } catch (err) {\r\n        const msg = (err.message)\r\n        Promise.reject(msg);\r\n    }\r\n}\r\n\r\nasync function get5DayForeCast(cityKey, isC) {\r\n    const metric = () => {\r\n        return isC === '℃' ? true : false\r\n    }\r\n    try {\r\n        let response = await fetch(`${BASE_URL}/forecasts/v1/daily/5day/${cityKey}?apikey=${API_KEY}&metric=${metric()}`)\r\n        if (!response.ok) {\r\n            const message = `An error has occured: ${response.status}`;\r\n            throw new Error(message);\r\n        }\r\n        const forecast5day = await response.json()\r\n        return forecast5day\r\n    } catch (err) {\r\n        const msg = (err.message)\r\n        Promise.reject(msg);\r\n    }\r\n}\r\n\r\nasync function getLatLanCoor(lat, lon) {\r\n    try {\r\n        const response = await fetch(`${BASE_URL}/locations/v1/cities/geoposition/search?apikey=${API_KEY}&q=${lat},${lon}`)\r\n        if (!response.ok) {\r\n            const message = `An error has occured: ${response.status}`;\r\n            throw new Error(message);\r\n        }\r\n        const city = await response.json()\r\n        return city\r\n    } catch (err) {\r\n        const msg = (err.message)\r\n        Promise.reject(msg);\r\n    }\r\n\r\n}\r\n\r\nfunction _makeId(length = 5) {\r\n    var text = \"\";\r\n    var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r\n    for (var i = 0; i < length; i++) {\r\n        text += possible.charAt(Math.floor(Math.random() * possible.length));\r\n    }\r\n    return text;\r\n}","import React, { useEffect, useState } from 'react'\r\n\r\nexport const CitySearch = ({ onSearch, onGetCityForecast }) => {\r\n    const [cityInput, setCity] = useState('')\r\n    const [cities, setCities] = useState(null)\r\n    let cityKey = ''\r\n\r\n    useEffect(async () => {\r\n        const optionalCities = await onSearch(cityInput)\r\n        setCities(optionalCities)\r\n    }, [cityInput])\r\n\r\n    const onSetCity = async (ev) => {\r\n        setCity(ev.target.value)\r\n    }\r\n    const getCityForecast = () => {\r\n        console.log('cities', cities);\r\n        onGetCityForecast(cities[0].Key)\r\n    }\r\n    return (\r\n        <div className=\"city-search flex align-center justify-center\">\r\n            <input type=\"text\" list=\"cities\" onChange={onSetCity} name=\"cityInput\"\r\n                value={cityInput} placeholder=\"search city\" />\r\n            {cities && <datalist id=\"cities\">\r\n                {cities.map((city) => {\r\n                    cityKey = city.key\r\n                    return <option key={city.Key} value={city.LocalizedName} />\r\n                }\r\n                )}\r\n            </datalist>}\r\n            <button onClick={getCityForecast}>Search</button>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\n\r\nexport function WeatherPreview({ day, degree, isDarkMode }) {\r\n\r\n    const getTemp = (min, max) => {\r\n        const avgTemp = '' + (min + max) / 2\r\n        return avgTemp.substr(0, 4)\r\n    }\r\n    const getDate = () => {\r\n        const year = day.Date.substr(0, 4)\r\n        const month = day.Date.substr(5, 2)\r\n        const dateDey = day.Date.substr(8, 2)\r\n        const date = `${dateDey}-${month}-${year}`\r\n        return date\r\n    }\r\n\r\n    return (\r\n        <div className={`weather-preview ${isDarkMode()} flex column align-center justify-center`}>\r\n            <span>{getDate()}</span>\r\n            <br />\r\n            <div>\r\n                <span>\r\n                    {getTemp(day.Temperature.Minimum.Value, day.Temperature.Maximum.Value)}</span>\r\n                <span>{degree}</span>\r\n            </div>\r\n            <div className=\"flex column align-center justify-center\">\r\n                {day.Day.IconPhrase}\r\n                <img src={process.env.PUBLIC_URL + `/images/${day.Day.Icon}.png`} alt=\"day icon\" />\r\n            </div>\r\n            <div className=\"flex column align-center justify-center\">\r\n                {day.Night.IconPhrase}\r\n                <img src={process.env.PUBLIC_URL + `/images/${day.Night.Icon}.png`} alt=\"night icon\" />\r\n            </div>\r\n        </div>\r\n    )\r\n}","import { Card } from '@material-ui/core'\r\nimport React from 'react'\r\nimport { WeatherPreview } from './WeatherPreview.jsx'\r\n\r\nexport const WeatherList = ({ forecast, degree, isDarkMode }) => {\r\n\r\n    return (\r\n        <div className='wheather-list flex jastify-center align-center'>\r\n            {forecast.map(day => {\r\n                return <Card key={day.EpochDate} variant=\"outlined\" className=\"weather-preview-card\">\r\n                    <WeatherPreview day={day} degree={degree} isDarkMode={isDarkMode} /></Card>\r\n            })}\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useState } from 'react'\r\nimport { weatherService } from '../services/weatherService';\r\nimport { errorMsg, setCity } from '../actions/weatherActions';\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { CitySearch } from '../cmps/CitySearch';\r\nimport { WeatherList } from '../cmps/WeatherList'\r\nimport { MsgModal } from '../cmps/MsgModal'\r\nexport const ForecastPage = () => {\r\n    const { cityKey, darkMod, degree, error } = useSelector(state => state.weatherModule)\r\n    const [forecast, setForecast] = useState('')\r\n    const [currentForecast, setCurrentForecast] = useState('')\r\n    const [favorits, setFavorits] = useState('')\r\n    const [cityName, setcityName] = useState('')\r\n    const dispatch = useDispatch()\r\n    let cityId\r\n    useEffect(() => {\r\n        if (cityKey === '') {\r\n            navigator.geolocation.getCurrentPosition(success, navigatorError)\r\n        } else {\r\n            try {   \r\n                onGetCityForecast(cityKey)\r\n            } catch (err) {\r\n                dispatch(errorMsg(err))\r\n            }\r\n        }\r\n    }, [])\r\n    useEffect(async () => {\r\n        try {   \r\n            const favoritCities = await weatherService.loadCities()\r\n            setFavorits(favoritCities)\r\n        } catch (err) {\r\n            dispatch(errorMsg(err))\r\n        }\r\n    },[])\r\n\r\n    const success = async (pos) => {\r\n        try {\r\n            const lat = pos.coords.latitude\r\n            const lon = pos.coords.longitude\r\n            const city = await weatherService.getLatLanCoor(lat, lon)\r\n            dispatch(setCity(city.cityKey))\r\n            setcityName(city.LocalizedName)\r\n            await onGetCityForecast(city.Key)\r\n        } catch (err) {\r\n            dispatch(errorMsg(err))\r\n        }\r\n    }\r\n    const navigatorError = () => {\r\n        try {   \r\n            dispatch(setCity('215854'))\r\n            dispatch(errorMsg('there was an error to get location'))\r\n        } catch (err) {\r\n            dispatch(errorMsg(err))\r\n        }\r\n    }\r\n    const isDarkMode = () => {\r\n        return darkMod ? 'dark' : ''\r\n    }\r\n    const onSearch = async (searchTerm) => {\r\n        try {   \r\n            return await weatherService.searchCityAutoComplete(searchTerm)\r\n        } catch (err) {\r\n            dispatch(errorMsg(err))\r\n        }\r\n    }\r\n    const onGetCityForecast = async (cityKey) => {\r\n        try {\r\n            dispatch(setCity(cityKey))\r\n            const forecast5Day = await weatherService.get5DayForeCast(cityKey, degree)\r\n            const currentForecast = await weatherService.getCityCurrentCondition(cityKey)\r\n            const city = await weatherService.searchCityByCityKey(cityKey)\r\n            setCurrentForecast(currentForecast[0])\r\n            setForecast(forecast5Day.DailyForecasts)\r\n            setcityName(city.LocalizedName)\r\n        } catch (err) {\r\n            dispatch(errorMsg(err))\r\n        }   \r\n    }\r\n    const getTemp = () => {\r\n        if (degree === '℃') {\r\n            return currentForecast.Temperature.Metric.Value\r\n        } else {\r\n            return currentForecast.Temperature.Imperial.Value\r\n        }\r\n    }\r\n    const onAddToFavorits = () => {\r\n        try {\r\n            weatherService.save(cityKey, cityName)\r\n            dispatch(errorMsg('city added to favorits'))\r\n        } catch(err) {\r\n            dispatch(errorMsg(err))\r\n        }\r\n    }\r\n    const onDeleteCity = () => {\r\n        try {   \r\n            weatherService.remove(cityId)\r\n            dispatch(errorMsg('city removed'))\r\n        } catch (err) {\r\n            dispatch(errorMsg(err))\r\n        }\r\n    }\r\n    const isFavorit = () => {\r\n        if (!favorits || favorits.length === 0) return false\r\n        return favorits.some(city => {\r\n            cityId = city._id\r\n            return city.cityKey === cityKey\r\n        })\r\n    }\r\n    const onCloseModal = () => {\r\n        dispatch(errorMsg(''))\r\n    }\r\n\r\n    return (\r\n        <section className=\"main-layout\">\r\n            <div className={`forecast-page ${isDarkMode()} flex column justify-center align-center`}>\r\n\r\n                <CitySearch onSearch={onSearch} onGetCityForecast={onGetCityForecast} />\r\n                {cityName && <h1>{cityName}</h1>}\r\n                {currentForecast && <span>{currentForecast.WeatherText}</span>}\r\n                <span><img src={process.env.PUBLIC_URL + `/images/${currentForecast.WeatherIcon}.png`} alt=\"current condition icon\" /></span>\r\n                {forecast && <span className=\"current-temp\">{getTemp()}{degree}</span>}\r\n                {forecast && <WeatherList forecast={forecast}\r\n                    isDarkMode={isDarkMode} degree={degree} darkMod={darkMod} />}\r\n                {/* {console.log('isFavorit', isFavorit())} */}\r\n                {isFavorit() ? <button className=\"btn-remove-from-favorit\"\r\n                    onClick={onDeleteCity}>delete city from favorits</button>\r\n                    : <button className=\"btn-add-to-favorit\"\r\n                        onClick={() => onAddToFavorits()}>add to favorit cities</button>}\r\n            </div>\r\n            {error && <MsgModal msg={error} onCloseModal={onCloseModal} />}\r\n        </section>\r\n    )\r\n}","import React, { useEffect, useState } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport function FavoritPreview({ favoritCity, onDeleteCity, onSetCity, isDarkMode, degree }) {\r\n\r\n    const [temp, setTemp] = useState('')\r\n    const [unit, setUnit] = useState('')\r\n\r\n    useEffect(() => {\r\n        setTemp(getTemp())\r\n        setUnit(getUnit())\r\n    }, [degree])\r\n\r\n    const previewClicked = () => {\r\n        onSetCity(favoritCity.cityKey)\r\n    }\r\n    const removeCity = (ev) => {\r\n        ev.preventDefault()\r\n        onDeleteCity(favoritCity._id)\r\n    }\r\n    const getTemp = () => {\r\n        if (degree === '℃') {\r\n            return favoritCity.cityCurrentCondition[0].Temperature.Metric.Value\r\n        } else {\r\n            return favoritCity.cityCurrentCondition[0].Temperature.Imperial.Value\r\n        }\r\n    }\r\n    const getUnit = () => {\r\n        return degree === '℃' ? favoritCity.cityCurrentCondition[0].Temperature.Metric.Unit :\r\n            favoritCity.cityCurrentCondition[0].Temperature.Imperial.Unit\r\n    }\r\n    return (\r\n        <div className={`favorit-preview ${isDarkMode()} flex column align-center justify-center`} onClick={previewClicked}>\r\n            <Link to=\"/\" className=\"favorit-preview-link\">\r\n                <h1 className={`favorit-preview-h1 ${isDarkMode()}`}>{favoritCity.name}</h1>\r\n                <div className=\"favorit-preview-content flex column justify-center align-center\">\r\n                    <span className={`favorit-preview-span ${isDarkMode()}`}>\r\n                        {temp && <span>{temp}</span>}{temp && <span>{unit}</span>}\r\n                    </span>\r\n                    <span className={`favorit-preview-span ${isDarkMode()} flex column justify-center align-center`}>\r\n                        {favoritCity.cityCurrentCondition[0].WeatherText}\r\n                        <img\r\n                            src={process.env.PUBLIC_URL + `/images/${favoritCity.cityCurrentCondition[0].WeatherIcon}.png`}\r\n                            alt=\"current condition icon\" />\r\n                    </span>\r\n                    <button className=\"delete-btn\" onClick={(ev) => removeCity(ev)}>remove city</button>\r\n                </div>\r\n            </Link>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport { Card } from '@material-ui/core'\r\nimport { FavoritPreview } from './FavoritPreview.jsx'\r\n\r\nexport const FavoritList = ({ favoritCities, onDeleteCity, onSetCity, isDarkMode, degree, darkMod }) => {\r\n    if (!favoritCities || favoritCities.length === 0) return <div>There is no favorit cities</div>\r\n    return (\r\n        <div className='favorit-list flex align-center justify-center'>\r\n            {favoritCities.map(favoritCity => {\r\n                return <Card key={favoritCity._id} variant=\"outlined\">\r\n                    < FavoritPreview favoritCity={favoritCity}\r\n                        onDeleteCity={onDeleteCity} onSetCity={onSetCity}\r\n                        isDarkMode={isDarkMode} degree={degree} darkMod={darkMod} />\r\n                </Card>\r\n            }\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { weatherService } from '../services/weatherService'\r\nimport { setCity, errorMsg } from '../actions/weatherActions'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { FavoritList } from '../cmps/FavoritList'\r\nimport { MsgModal } from '../cmps/MsgModal'\r\n\r\nexport const FavoritCities = () => {\r\n    const { darkMod, degree, error } = useSelector(state => state.weatherModule)\r\n    const [favoritCities, setFavoritCities] = useState('')\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(async () => {\r\n        try {\r\n            const cities = await weatherService.loadCities()\r\n            setFavoritCities(cities)\r\n        } catch (err) {\r\n            dispatch(errorMsg(err))\r\n        }\r\n    }, [error])\r\n\r\n    const isDarkMode = () => {\r\n        return darkMod ? 'dark' : ''\r\n    }\r\n    const onDeleteCity = (cityId => {\r\n        try {\r\n            weatherService.remove(cityId)\r\n            const cities = weatherService.loadCities()\r\n            setFavoritCities(cities)\r\n            dispatch(errorMsg('city removed'))\r\n        } catch (err) {\r\n            dispatch(errorMsg(err))\r\n        }\r\n    })\r\n    const onSetCity = (cityKey) => {\r\n        try {\r\n            dispatch(setCity(cityKey))\r\n        } catch (err) {\r\n            dispatch(errorMsg(err))\r\n        }\r\n    }\r\n    const onCloseModal = () => {\r\n        dispatch(errorMsg(''))\r\n    }\r\n    return (\r\n        <div>\r\n            <section className='main-layout'>\r\n                <div className={`favorit-page ${isDarkMode()} flex column`}>\r\n                    {favoritCities &&\r\n                        <FavoritList\r\n                            favoritCities={favoritCities}\r\n                            onDeleteCity={onDeleteCity}\r\n                            onSetCity={onSetCity}\r\n                            isDarkMode={isDarkMode}\r\n                            degree={degree}\r\n                            darkMod={darkMod}\r\n                        />}\r\n                </div>\r\n                {error && <MsgModal msg={error} onCloseModal={onCloseModal} />}\r\n            </section>\r\n        </div>\r\n    )\r\n}","import React from \"react\"\r\nimport { useSelector } from \"react-redux\"\r\n\r\nexport function AppFooter() {\r\n  const { darkMod } = useSelector(state => state.weatherModule)\r\n  const setClassName = () => {\r\n    return darkMod ? 'app-footer dark flex align-center justify-center' : 'app-footer flex align-center justify-center'\r\n  }\r\n  return (\r\n    <footer className={setClassName()}>\r\n      <div className=\"flex justify-center align-center\">\r\n        Coffeerights 2020\r\n      </div>\r\n    </footer>\r\n  )\r\n}","import './assets/main.scss';\nimport React from 'react';\nimport { Switch, Route } from 'react-router-dom'\nimport { AppHeader } from './cmps/AppHeader'\nimport { ForecastPage } from './pages/ForecastPage'\nimport { FavoritCities } from './pages/FavoritCities'\nimport { AppFooter } from './cmps/AppFooter'\nexport const App = () => {\n  return (\n    <div className=\"weather-app\">\n      <AppHeader />\n      <Switch>\n        <Route path=\"/favoritCities\" component={FavoritCities} />\n        <Route path=\"/\" component={ForecastPage} />\n      </Switch>\n      <AppFooter />\n    </div>\n  );\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","\r\nconst initialState = {\r\n    cityKey: '',\r\n    error: '',\r\n    darkMod:false,\r\n    degree:'℃',\r\n}\r\n\r\nexport function weatherReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case 'SET_CITY':\r\n            return {\r\n                ...state,\r\n                cityKey: action.cityKey\r\n            }\r\n        case 'SET_DARKMOD':\r\n            return {\r\n                ...state,\r\n                darkMod: action.isDark\r\n            }\r\n        case 'SET_DEGREE':\r\n            return {\r\n                ...state,\r\n                degree: action.degree\r\n            }\r\n        case 'ERROR':\r\n            return {\r\n                ...state,\r\n                error: action.msg\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { createStore, applyMiddleware, combineReducers, compose } from 'redux';\nimport { HashRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\n\n// import * as serviceWorker from './serviceWorker';\nimport { weatherReducer } from './reducers/weatherReducer.js';\n\nconst rootReducer = combineReducers({\n  weatherModule: weatherReducer\n});\n\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)));\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}