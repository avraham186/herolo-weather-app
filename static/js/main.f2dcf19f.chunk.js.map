{"version":3,"sources":["services/storageService.js","services/weatherService.js","actions/weatherActions.js","cmps/MsgModal.jsx","cmps/AppHeader.jsx","cmps/CitySearch.jsx","cmps/WeatherPreview.jsx","cmps/WeatherList.jsx","pages/ForecastPage.jsx","cmps/FavoritPreview.jsx","cmps/FavoritList.jsx","pages/FavoritCities.jsx","cmps/AppFooter.jsx","App.js","reportWebVitals.js","reducers/weatherReducer.js","index.js"],"names":["storageService","loadFromStorage","key","val","localStorage","getItem","JSON","parse","saveToStorage","stringify","weatherService","save","city","cityCurrentCondition","_id","cityToSave","_makeId","name","LocalizedName","cityKey","Key","gCitys","push","Promise","resolve","err","msg","searchCityByCityKey","searchCityAutoComplete","getCityCurrentCondition","get5DayForeCast","getLatLanCoor","API_KEY","BASE_URL","searchTerm","a","fetch","response","ok","message","status","Error","json","cities","correntCondition","isC","metric","forecast5day","lat","lon","length","text","possible","i","charAt","Math","floor","random","setCity","dispatch","type","removeCity","cityId","errorMsg","console","log","MsgModal","onCloseModal","className","onClick","AppHeader","useSelector","state","weatherModule","darkMod","error","useState","isDark","setIsDark","C_or_F","setC_or_F","useDispatch","useEffect","degree","setIsDarkMod","onSetIsDark","document","querySelector","classList","remove","add","to","src","alt","CitySearch","onSearch","onGetCityForecast","cityInput","setCities","optionalCities","onSetCity","ev","target","value","list","onChange","placeholder","id","map","WeatherPreview","min","max","day","isDarkMode","year","Date","substr","month","dateDey","getDate","Temperature","Minimum","Value","Maximum","Day","IconPhrase","Night","WeatherList","forecast","Card","variant","EpochDate","ForecastPage","favoritCities","setForecast","currentForecast","setCurrentForecast","cityName","setcityName","navigator","geolocation","getCurrentPosition","success","navigatorError","pos","coords","latitude","longitude","forecast5Day","DailyForecasts","onAddToFavorits","addCity","WeatherText","Metric","Imperial","some","FavoritPreview","favoritCity","onDeleteCity","temp","setTemp","unit","setUnit","getTemp","getUnit","Unit","preventDefault","FavoritList","FavoritCities","AppFooter","App","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","rootReducer","combineReducers","action","filter","cityToRemove","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","getElementById"],"mappings":"qPAUO,IAAMA,EAAiB,CAC1BC,gBAXJ,SAAyBC,GACrB,IAAIC,EAAMC,aAAaC,QAAQH,GAC/B,OAAQC,EAAOG,KAAKC,MAAMJ,GAAO,MAUjCK,cAPJ,SAAuBN,EAAKC,GACxBC,aAAaF,GAAOI,KAAKG,UAAUN,KCJ1BO,EAAiB,CAC1BC,KAaJ,SAAcC,EAAMC,GAChB,IACI,GAAID,EAAKE,IAAK,OACd,IAAMC,EAAa,CACfD,IAAKE,IACLC,KAAML,EAAKM,cACXL,uBACAM,QAASP,EAAKQ,KAIlB,OAFAC,EAAOC,KAAKP,GACZf,EAAeQ,cAfH,SAe8Ba,GACnCE,QAAQC,QAAQT,GACzB,MAAOU,GACL,IAAMC,EAAMD,EACZ,OAAOF,QAAQC,QAAQE,KA1B3BC,oB,4CACAC,uB,4CACAC,wB,4CACAC,gB,8CACAC,c,+CAIEC,EAAU,mCACVC,EAAW,qCACXZ,EAAS,G,4CAoBf,WAAsCa,GAAtC,qBAAAC,EAAA,+EAE6BC,MAAM,GAAD,OAAIH,EAAJ,oDAAwDD,EAAxD,cAAqEE,IAFvG,WAEYG,EAFZ,QAGsBC,GAHtB,sBAIkBC,EAJlB,gCAIqDF,EAASG,QAC5C,IAAIC,MAAMF,GAL5B,uBAO6BF,EAASK,OAPtC,cAOcC,EAPd,yBAQeA,GARf,kCAUcjB,EAAO,KAAIa,QACjBhB,QAAQC,QAAQE,GAXxB,2D,kEAcA,WAAmCP,GAAnC,qBAAAgB,EAAA,+EAE6BC,MAAM,GAAD,OAAIH,EAAJ,yBAA6Bd,EAA7B,mBAA+Ca,IAFjF,WAEYK,EAFZ,QAGsBC,GAHtB,sBAIkBC,EAJlB,gCAIqDF,EAASG,QAC5C,IAAIC,MAAMF,GAL5B,uBAO2BF,EAASK,OAPpC,cAOc9B,EAPd,yBAQeA,GARf,kCAUcc,EAAO,KAAIa,QACjBhB,QAAQC,QAAQE,GAXxB,2D,kEAeA,WAAuCP,GAAvC,qBAAAgB,EAAA,+EAE6BC,MAAM,GAAD,OAAIH,EAAJ,iCAAqCd,EAArC,mBAAuDa,EAAvD,mBAFlC,WAEYK,EAFZ,QAGsBC,GAHtB,sBAIkBC,EAJlB,gCAIqDF,EAASG,QAC5C,IAAIC,MAAMF,GAL5B,uBAOuCF,EAASK,OAPhD,cAOcE,EAPd,yBAQeA,GARf,kCAUclB,EAAO,KAAIa,QACjBhB,QAAQC,QAAQE,GAXxB,2D,kEAeA,WAA+BP,EAAS0B,GAAxC,uBAAAV,EAAA,6DACUW,EAAS,WACX,MAAe,WAARD,GAFf,kBAK6BT,MAAM,GAAD,OAAIH,EAAJ,oCAAwCd,EAAxC,mBAA0Da,EAA1D,mBAA4Ec,MAL9G,WAKYT,EALZ,QAMsBC,GANtB,sBAOkBC,EAPlB,gCAOqDF,EAASG,QAC5C,IAAIC,MAAMF,GAR5B,wBAUmCF,EAASK,OAV5C,eAUcK,EAVd,yBAWeA,GAXf,kCAacrB,EAAO,KAAIa,QACjBhB,QAAQC,QAAQE,GAdxB,2D,kEAkBA,WAA6BsB,EAAKC,GAAlC,qBAAAd,EAAA,+EAE+BC,MAAM,GAAD,OAAIH,EAAJ,0DAA8DD,EAA9D,cAA2EgB,EAA3E,YAAkFC,IAFtH,WAEcZ,EAFd,QAGsBC,GAHtB,sBAIkBC,EAJlB,gCAIqDF,EAASG,QAC5C,IAAIC,MAAMF,GAL5B,uBAO2BF,EAASK,OAPpC,cAOc9B,EAPd,yBAQeA,GARf,kCAUcc,EAAO,KAAIa,QACjBhB,QAAQC,QAAQE,GAXxB,2D,sBAgBA,SAASV,IAGL,IAH0B,IAAbkC,EAAY,uDAAH,EAClBC,EAAO,GACPC,EAAW,iEACNC,EAAI,EAAGA,EAAIH,EAAQG,IACxBF,GAAQC,EAASE,OAAOC,KAAKC,MAAMD,KAAKE,SAAWL,EAASF,SAEhE,OAAOC,ECpHJ,SAASO,EAAQvC,GACpB,OAAO,SAAAwC,GACH,IACIA,EAAS,CAAEC,KAAM,WAAYzC,YAC/B,MAAOM,GACLkC,EAAS,CAAEC,KAAM,QAASnC,UAkC/B,SAASoC,EAAWC,GACvB,OAAO,SAAAH,GACH,IACIA,EAAS,CAAEC,KAAM,cAAeE,WAClC,MAAOrC,GACLkC,EAAS,CAAEC,KAAM,QAASnC,UAI/B,SAASsC,EAASrC,GACrB,OAAO,SAAAiC,GACH,IACIA,EAAS,CAAEC,KAAM,QAASlC,QAC5B,MAAOD,GACLuC,QAAQC,IAAI,qBAAsBxC,K,WCrDjCyC,EAAW,SAAC,GAA2B,IAAzBxC,EAAwB,EAAxBA,IAAKyC,EAAmB,EAAnBA,aAE5B,OACI,qBAAKC,UAAU,YAAf,SACI,0BAASA,UAAU,qDAAnB,UACK1C,EACD,uBACA,wBAAQkC,KAAK,qBAAqBS,QAASF,EAA3C,yBCHT,SAASG,IACZ,MAA2BC,aAAY,SAAAC,GAAK,OAAIA,EAAMC,iBAA9CC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MACjB,EAA4BC,oBAAS,GAArC,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAA4BF,mBAAS,UAArC,mBAAOG,EAAP,KAAeC,EAAf,KAEMrB,EAAWsB,cAEjBC,qBAAU,WFOP,IAAmBC,EENlBxB,GFMkBwB,EENCJ,EFOhB,SAAApB,GACH,IACIA,EAAS,CAAEC,KAAM,aAAcuB,WACjC,MAAO1D,GACLkC,EAAS,CAAEC,KAAM,QAASnC,cEV/B,CAACsD,IACJG,qBAAU,WACNvB,EFND,SAAsBkB,GACzB,OAAO,SAAAlB,GACH,IACIA,EAAS,CAAEC,KAAM,cAAeiB,WAClC,MAAOpD,GACLkC,EAAS,CAAEC,KAAM,QAASnC,UECrB2D,CAAaP,MACvB,CAACA,IAEJ,IAGMQ,EAAc,WACZR,EACAS,SAASC,cAAc,gBAAgBC,UAAUC,OAAO,QAExDH,SAASC,cAAc,gBAAgBC,UAAUE,IAAI,QAEzDZ,GAAWD,IAKf,OACI,yBAAQT,UAdDM,EAAU,8BAAgC,yBAcjD,UACI,sBAAKN,UAAU,8BAAf,UAEKS,EAAS,wBAAQR,QAASgB,EAAjB,0BACN,wBAAQhB,QAASgB,EAAjB,yBACJ,wBAAQhB,QATD,WACIW,EAAP,WAAXD,EAA4B,SAAiB,WAQtC,SAA8BA,IAC9B,sBAAKX,UAAU,2BAAf,UACI,eAAC,IAAD,CAAMuB,GAAG,IAAT,cAAc,qBAAKC,IAAI,gBAAgBC,IAAI,KAA3C,iBACA,cAAC,IAAD,CAAMF,GAAG,iBAAT,kCAGPhB,GAAS,cAAC,EAAD,CAAUjD,IAAKiD,OC5C9B,IAAMmB,EAAa,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,SAAUC,EAAwB,EAAxBA,kBACnC,EAA6BpB,mBAAS,IAAtC,mBAAOqB,EAAP,KAAkBvC,EAAlB,KACA,EAA4BkB,mBAAS,MAArC,mBAAOjC,EAAP,KAAeuD,EAAf,KAGAhB,oBAAS,sBAAC,4BAAA/C,EAAA,sEACuB4D,EAASE,GADhC,OACAE,EADA,OAEND,EAAUC,GAFJ,2CAGP,CAACF,IAEJ,IAAMG,EAAS,uCAAG,WAAOC,GAAP,SAAAlE,EAAA,sDACduB,EAAQ2C,EAAGC,OAAOC,OADJ,2CAAH,sDAOf,OACI,sBAAKnC,UAAU,+CAAf,UACI,uBAAOR,KAAK,OAAO4C,KAAK,SAASC,SAAUL,EAAWnF,KAAK,YACvDsF,MAAON,EAAWS,YAAY,gBACjC/D,GAAU,0BAAUgE,GAAG,SAAb,SACNhE,EAAOiE,KAAI,SAAChG,GAET,OADUA,EAAKV,IACR,wBAAuBqG,MAAO3F,EAAKM,eAAtBN,EAAKQ,UAIjC,wBAAQiD,QAfQ,WACpBL,QAAQC,IAAI,SAAUtB,GACtBqD,EAAkBrD,EAAO,GAAGvB,MAaxB,wB,QC5BL,SAASyF,EAAT,GAAoD,IAEtCC,EAAKC,EAFOC,EAAyB,EAAzBA,IAAI7B,EAAqB,EAArBA,OAAO8B,EAAc,EAAdA,WAexC,OACI,sBAAK7C,UAAS,0BAAqB6C,IAArB,4CAAd,UACI,+BAVQ,WACZ,IAAMC,EAAOF,EAAIG,KAAKC,OAAO,EAAG,GAC1BC,EAAQL,EAAIG,KAAKC,OAAO,EAAG,GAC3BE,EAAUN,EAAIG,KAAKC,OAAO,EAAG,GAEnC,MADU,UAAME,EAAN,YAAiBD,EAAjB,YAA0BH,GAMzBK,KACP,uBACA,gCACI,gCAlBKT,EAmBQE,EAAIQ,YAAYC,QAAQC,MAnB3BX,EAmBkCC,EAAIQ,YAAYG,QAAQD,OAlB5D,IAAMZ,EAAMC,GAAO,GACpBK,OAAO,EAAG,MAkBjB,+BAAOjC,OAEX,8CAAiB6B,EAAIY,IAAIC,cACzB,gDAAmBb,EAAIc,MAAMD,iBCvBlC,IAAME,EAAc,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,SAAU7C,EAAyB,EAAzBA,OAAQ8B,EAAiB,EAAjBA,WAE5C,OACI,qBAAK7C,UAAU,iDAAf,SACK4D,EAASpB,KAAI,SAAAI,GACV,OAAO,cAACiB,EAAA,EAAD,CAA0BC,QAAQ,WAAW9D,UAAU,uBAAvD,SACH,cAACyC,EAAD,CAAgBG,IAAKA,EAAK7B,OAAQA,EAAQ8B,WAAYA,KADxCD,EAAImB,iBCDzBC,EAAe,WACxB,IAKItE,EALJ,EAA2DS,aAAY,SAAAC,GAAK,OAAIA,EAAMC,iBAA9E4D,EAAR,EAAQA,cAAelH,EAAvB,EAAuBA,QAASuD,EAAhC,EAAgCA,QAASS,EAAzC,EAAyCA,OAAQR,EAAjD,EAAiDA,MACjD,EAAgCC,mBAAS,IAAzC,mBAAOoD,EAAP,KAAiBM,EAAjB,KACA,EAA8C1D,mBAAS,IAAvD,mBAAO2D,EAAP,KAAwBC,EAAxB,KACA,EAAgC5D,mBAAS,IAAzC,mBAAO6D,EAAP,KAAiBC,EAAjB,KACM/E,EAAWsB,cAGjBC,qBAAU,WACU,KAAZ/D,EACAwH,UAAUC,YAAYC,mBAAmBC,EAASC,GAElD/C,EAAkB7E,KAEvB,IAEH,IAAM2H,EAAO,uCAAG,WAAOE,GAAP,mBAAA7G,EAAA,6DACNa,EAAMgG,EAAIC,OAAOC,SACjBjG,EAAM+F,EAAIC,OAAOE,UAFX,SAGOzI,EAAeqB,cAAciB,EAAKC,GAHzC,cAGNrC,EAHM,OAIZ8H,EAAY9H,EAAKM,eACjByC,EAASD,EAAQ9C,EAAKO,UALV,SAMN6E,EAAkBpF,EAAKQ,KANjB,2CAAH,sDAQP2H,EAAiB,WACnBpF,EAASD,EAAQ,WACjBC,EAASI,EAAS,uCAClBC,QAAQC,IAAI,uCAEVgD,EAAa,WACf,OAAOvC,EAAU,OAAS,IAExBqB,EAAQ,uCAAG,WAAO7D,GAAP,SAAAC,EAAA,sEACAzB,EAAekB,uBAAuBM,GADtC,mFAAH,sDAGR8D,EAAiB,uCAAG,WAAO7E,GAAP,mBAAAgB,EAAA,6DACtBwB,EAASD,EAAQvC,IADK,SAEKT,EAAeoB,gBAAgBX,EAASgE,GAF7C,cAEhBiE,EAFgB,gBAGQ1I,EAAemB,wBAAwBV,GAH/C,cAGhBoH,EAHgB,gBAIH7H,EAAeiB,oBAAoBR,GAJhC,OAIhBP,EAJgB,OAKtB4H,EAAmBD,EAAgB,IACnCD,EAAYc,EAAaC,gBACzBX,EAAY9H,EAAKM,eAPK,4CAAH,sDAgBjBoI,EAAkB,WACpB3F,EN/BD,SAAiBxC,GACpB,8CAAO,WAAMwC,GAAN,mBAAAxB,EAAA,+EAEoCzB,EAAemB,wBAAwBV,GAF3E,cAEON,EAFP,gBAGoBH,EAAeiB,oBAAoBR,GAHvD,cAGOP,EAHP,gBAI0BF,EAAeC,KAAKC,EAAKC,GAJnD,OAIOE,EAJP,OAKK4C,EAAS,CAAEC,KAAM,WAAY7C,eALlC,kDAOC4C,EAAS,CAAEC,KAAM,QAASnC,IAAG,OAP9B,0DAAP,sDM8Ba8H,CAAQpI,IACjBwC,EAASI,EAAS,4BAgBtB,OACI,0BAASK,UAAU,cAAnB,UACI,sBAAKA,UAAS,wBAAmB6C,IAAnB,4CAAd,UAEI,cAAC,EAAD,CAAYlB,SAAUA,EAAUC,kBAAmBA,IAClDyC,GAAY,6BAAKA,IACjBF,GAAmB,+BAAOA,EAAgBiB,cAC1CxB,GAAY,uBAAM5D,UAAU,eAAhB,UA/BN,WAAXe,EACOoD,EAAgBf,YAAYiC,OAAO/B,MAEnCa,EAAgBf,YAAYkC,SAAShC,MA4BgBvC,KACvD6C,GAAY,cAAC,EAAD,CAAaA,SAAUA,EAChCf,WAAYA,EAAY9B,OAAQA,EAAQT,QAASA,IAlBtD2D,EAAcsB,MAAK,SAAA/I,GAEtB,OADAkD,EAASlD,EAAKE,IACPF,EAAKO,UAAYA,KAiBL,wBAAQiD,UAAU,0BAC7BC,QAzBK,WACjBV,EAASE,EAAWC,IACpBH,EAASI,EAAS,kBAsBK,uCAET,wBAAQK,UAAU,qBAChBC,QAAS,kBAAMiF,KADjB,sCAGT3E,GAAS,cAAC,EAAD,CAAUjD,IAAKiD,EAAOR,aAnBnB,WACjBR,EAASI,EAAS,YCvEnB,SAAS6F,EAAT,GAAgG,IAAtEC,EAAqE,EAArEA,YAAaC,EAAwD,EAAxDA,aAAc1D,EAA0C,EAA1CA,UAAWa,EAA+B,EAA/BA,WAAY9B,EAAmB,EAAnBA,OAE/E,GAFkG,EAAXT,QAE/DE,mBAAS,KAAjC,mBAAOmF,EAAP,KAAaC,EAAb,KACA,EAAwBpF,mBAAS,IAAjC,mBAAOqF,EAAP,KAAaC,EAAb,KAEAhF,qBAAU,WACN8E,EAAQG,KACRD,EAAQE,OACT,CAACjF,IAEJ,IAOMgF,EAAU,WACZ,MAAe,WAAXhF,EACO0E,EAAYhJ,qBAAqB,GAAG2G,YAAYiC,OAAO/B,MAEvDmC,EAAYhJ,qBAAqB,GAAG2G,YAAYkC,SAAShC,OAGlE0C,EAAU,WACZ,MAAkB,WAAXjF,EAAiB0E,EAAYhJ,qBAAqB,GAAG2G,YAAYiC,OAAOY,KAC3ER,EAAYhJ,qBAAqB,GAAG2G,YAAYkC,SAASW,MAEjE,OACI,qBAAKjG,UAAS,0BAAqB6C,IAArB,4CAA6E5C,QAnBxE,WACnB+B,EAAUyD,EAAY1I,UAkBtB,SACI,eAAC,IAAD,CAAMwE,GAAG,IAAIvB,UAAU,uBAAvB,UACI,oBAAIA,UAAS,6BAAwB6C,KAArC,SAAsD4C,EAAY5I,OAClE,sBAAKmD,UAAU,kEAAf,UACI,uBAAMA,UAAS,+BAA0B6C,KAAzC,UACK8C,GAAQ,+BAAOA,IAAcA,GAAQ,+BAAOE,OAEjD,sBAAM7F,UAAS,+BAA0B6C,KAAzC,SACK4C,EAAYhJ,qBAAqB,GAAG2I,cAEzC,wBAAQpF,UAAU,aAAaC,QAAS,SAACgC,GAAD,OA1BrC,SAACA,GAChBA,EAAGiE,iBACHR,EAAaD,EAAY/I,KAwBmC+C,CAAWwC,IAA3D,iCCtCb,IAAMkE,EAAc,SAAC,GAA6E,IAA3ElC,EAA0E,EAA1EA,cAAeyB,EAA2D,EAA3DA,aAAc1D,EAA6C,EAA7CA,UAAWa,EAAkC,EAAlCA,WAAY9B,EAAsB,EAAtBA,OAAQT,EAAc,EAAdA,QACtF,OAAK2D,GAA0C,IAAzBA,EAAcnF,OAEhC,qBAAKkB,UAAU,gDAAf,SACKiE,EAAczB,KAAI,SAAAiD,GAEf,OAAO,cAAC5B,EAAA,EAAD,CAA4BC,QAAQ,WAApC,SACH,cAAE0B,EAAF,CAAiBC,YAAaA,EAC1BC,aAAcA,EAAc1D,UAAWA,EACvCa,WAAYA,EAAY9B,OAAQA,EAAQT,QAASA,KAHvCmF,EAAY/I,UALe,8DCChD0J,EAAgB,WACzB,MAAkDjG,aAAY,SAAAC,GAAK,OAAIA,EAAMC,iBAArE4D,EAAR,EAAQA,cAAe3D,EAAvB,EAAuBA,QAASS,EAAhC,EAAgCA,OAAQR,EAAxC,EAAwCA,MAClChB,EAAWsB,cAEXgC,EAAa,WACf,OAAOvC,EAAU,OAAS,IAY9B,OACI,8BACI,0BAASN,UAAU,cAAnB,UACI,qBAAKA,UAAS,uBAAkB6C,IAAlB,gBAAd,SACKoB,GACG,cAAC,EAAD,CACIA,cAAeA,EACfyB,aAjBF,SAAAhG,GAClBH,EAASE,EAAWC,IACpBH,EAASI,EAAS,kBAgBEqC,UAdN,SAACjF,GACfwC,EAASD,EAAQvC,KAcG8F,WAAYA,EACZ9B,OAAQA,EACRT,QAASA,MAGpBC,GAAS,cAAC,EAAD,CAAUjD,IAAKiD,EAAOR,aAjBvB,WACjBR,EAASI,EAAS,cClBnB,SAAS0G,IACd,IAAQ/F,EAAYH,aAAY,SAAAC,GAAK,OAAIA,EAAMC,iBAAvCC,QAIR,OACE,wBAAQN,UAHDM,EAAU,kBAAoB,aAGrC,SACE,qBAAKN,UAAU,mCAAf,iCCFC,IAAMsG,EAAM,WACjB,OACE,sBAAKtG,UAAU,cAAf,UACE,cAACE,EAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOqG,KAAK,iBAAiBC,UAAWJ,IACxC,cAAC,IAAD,CAAOG,KAAK,IAAIC,UAAWxC,OAE7B,cAACqC,EAAD,QCJSI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,+BCNRQ,EAAe,CACjBnK,QAAS,GACTkH,cAAe,GACfE,gBAAgB,GAChB5D,MAAO,GACPD,SAAQ,EACRS,OAAO,UCKX,IAAMoG,EAAcC,YAAgB,CAClC/G,cDHK,WAAuD,IAA/BD,EAA8B,uDAAtB8G,EAAcG,EAAQ,uCACzD,OAAQA,EAAO7H,MACX,IAAK,WACD,OAAO,2BACAY,GADP,IAEIrD,QAASsK,EAAOtK,UAExB,IAAK,cACD,OAAO,2BACAqD,GADP,IAEIE,QAAS+G,EAAO5G,SAExB,IAAK,aACD,OAAO,2BACAL,GADP,IAEIW,OAAQsG,EAAOtG,SAEvB,IAAK,uBACD,OAAO,2BACAX,GADP,IAEI+D,gBAAkBkD,EAAOlD,kBAEjC,IAAK,WACD,OAAO,2BACA/D,GADP,IAEI6D,cAAc,GAAD,mBAAM7D,EAAM6D,eAAZ,CAA2BoD,EAAO1K,eAEvD,IAAK,cACD,OAAO,2BACAyD,GADP,IAEI6D,cAAe7D,EAAM6D,cAAcqD,QAAO,SAAAC,GACtC,OAAOA,EAAa7K,MAAQ2K,EAAO3H,YAG/C,IAAK,QACD,OAAO,2BACAU,GADP,IAEIG,MAAO8G,EAAO/J,MAEtB,QACI,OAAO8C,MCjCboH,EAAmBC,OAAOC,sCAAwCC,IAClEC,EAAQC,YAAYV,EAAaK,EAAiBM,YAAgBC,OAExEC,IAASC,OACP,cAAC,IAAD,CAAUL,MAAOA,EAAjB,SACE,cAAC,IAAD,UACE,cAAC,EAAD,QAGJ1G,SAASgH,eAAe,SAM1BzB,M","file":"static/js/main.f2dcf19f.chunk.js","sourcesContent":["function loadFromStorage(key) {\r\n    var val = localStorage.getItem(key)\r\n    return (val) ? JSON.parse(val) : null;\r\n}\r\n\r\nfunction saveToStorage(key, val) {\r\n    localStorage[key] = JSON.stringify(val);\r\n}\r\n\r\n\r\nexport const storageService = {\r\n    loadFromStorage,\r\n    saveToStorage\r\n}","import { storageService } from './storageService.js'\r\n\r\nexport const weatherService = {\r\n    save,\r\n    searchCityByCityKey,\r\n    searchCityAutoComplete,\r\n    getCityCurrentCondition,\r\n    get5DayForeCast,\r\n    getLatLanCoor\r\n}\r\n\r\nconst STORAGE_KEY = 'cities'\r\nconst API_KEY = 'BmFV9KHIUx2TcW2wwfyb8GWT1lOc5i2L'\r\nconst BASE_URL = 'http://dataservice.accuweather.com'\r\nconst gCitys = []\r\n\r\nfunction save(city, cityCurrentCondition) {\r\n    try {\r\n        if (city._id) return\r\n        const cityToSave = {\r\n            _id: _makeId(),\r\n            name: city.LocalizedName,\r\n            cityCurrentCondition,\r\n            cityKey: city.Key\r\n        }\r\n        gCitys.push(cityToSave)\r\n        storageService.saveToStorage(STORAGE_KEY, gCitys)\r\n        return Promise.resolve(cityToSave);\r\n    } catch (err) {\r\n        const msg = err\r\n        return Promise.resolve(msg)\r\n    }\r\n}\r\n\r\nasync function searchCityAutoComplete(searchTerm) {\r\n    try {\r\n        let response = await fetch(`${BASE_URL}/locations/v1/cities/autocomplete?apikey=${API_KEY}&q=${searchTerm}`)\r\n        if (!response.ok) {\r\n            const message = `An error has occured: ${response.status}`;\r\n            throw new Error(message);\r\n        }\r\n        const cities = await response.json()\r\n        return cities\r\n    } catch (err) {\r\n        const msg = (err.message);\r\n        Promise.resolve(msg)\r\n    }\r\n}\r\nasync function searchCityByCityKey(cityKey) {\r\n    try {\r\n        let response = await fetch(`${BASE_URL}/locations/v1/${cityKey}?apikey=${API_KEY}`)\r\n        if (!response.ok) {\r\n            const message = `An error has occured: ${response.status}`;\r\n            throw new Error(message);\r\n        }\r\n        const city = await response.json()\r\n        return city\r\n    } catch (err) {\r\n        const msg = (err.message)\r\n        Promise.resolve(msg)\r\n    }\r\n}\r\n\r\nasync function getCityCurrentCondition(cityKey) {\r\n    try {\r\n        let response = await fetch(`${BASE_URL}/currentconditions/v1/${cityKey}?apikey=${API_KEY}&details=false`)\r\n        if (!response.ok) {\r\n            const message = `An error has occured: ${response.status}`;\r\n            throw new Error(message);\r\n        }\r\n        const correntCondition = await response.json()\r\n        return correntCondition\r\n    } catch (err) {\r\n        const msg = (err.message)\r\n        Promise.resolve(msg);\r\n    }\r\n}\r\n\r\nasync function get5DayForeCast(cityKey, isC) {\r\n    const metric = () => {\r\n        return isC === '℃' ? true : false\r\n    }\r\n    try {\r\n        let response = await fetch(`${BASE_URL}/forecasts/v1/daily/5day/${cityKey}?apikey=${API_KEY}&metric=${metric()}`)\r\n        if (!response.ok) {\r\n            const message = `An error has occured: ${response.status}`;\r\n            throw new Error(message);\r\n        }\r\n        const forecast5day = await response.json()\r\n        return forecast5day\r\n    } catch (err) {\r\n        const msg = (err.message)\r\n        Promise.resolve(msg);\r\n    }\r\n}\r\n\r\nasync function getLatLanCoor(lat, lon) {\r\n    try {\r\n        const response = await fetch(`${BASE_URL}/locations/v1/cities/geoposition/search?apikey=${API_KEY}&q=${lat},${lon}`)\r\n        if (!response.ok) {\r\n            const message = `An error has occured: ${response.status}`;\r\n            throw new Error(message);\r\n        }\r\n        const city = await response.json()\r\n        return city\r\n    } catch (err) {\r\n        const msg = (err.message)\r\n        Promise.resolve(msg);\r\n    }\r\n\r\n}\r\n\r\nfunction _makeId(length = 5) {\r\n    var text = \"\";\r\n    var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r\n    for (var i = 0; i < length; i++) {\r\n        text += possible.charAt(Math.floor(Math.random() * possible.length));\r\n    }\r\n    return text;\r\n}","import { weatherService } from \"../services/weatherService\";\r\n\r\nexport function setCity(cityKey) {\r\n    return dispatch => {\r\n        try {\r\n            dispatch({ type: 'SET_CITY', cityKey })\r\n        } catch (err) {\r\n            dispatch({ type: 'ERROR', err })\r\n        }\r\n    }\r\n}\r\nexport function setIsDarkMod(isDark) {\r\n    return dispatch => {\r\n        try {\r\n            dispatch({ type: 'SET_DARKMOD', isDark })\r\n        } catch (err) {\r\n            dispatch({ type: 'ERROR', err })\r\n        }\r\n    }\r\n}\r\nexport function setDegree(degree) {\r\n    return dispatch => {\r\n        try {\r\n            dispatch({ type: 'SET_DEGREE', degree })\r\n        } catch (err) {\r\n            dispatch({ type: 'ERROR', err })\r\n        }\r\n    }\r\n}\r\nexport function addCity(cityKey) {\r\n    return async dispatch => {\r\n        try {\r\n            const cityCurrentCondition = await weatherService.getCityCurrentCondition(cityKey)\r\n            const city = await weatherService.searchCityByCityKey(cityKey)\r\n            const cityToSave = await weatherService.save(city,cityCurrentCondition)\r\n                dispatch({ type: 'ADD_CITY', cityToSave })\r\n        } catch (err) {\r\n            dispatch({ type: 'ERROR', err })\r\n        }\r\n    }\r\n}\r\nexport function removeCity(cityId) {\r\n    return dispatch => {\r\n        try {\r\n            dispatch({ type: 'REMOVE_CITY', cityId })\r\n        } catch (err) {\r\n            dispatch({ type: 'ERROR', err })\r\n        }\r\n    }\r\n}\r\nexport function errorMsg(msg) {\r\n    return dispatch => {\r\n        try {\r\n            dispatch({ type: 'ERROR', msg })\r\n        } catch (err) {\r\n            console.log('there was an error', err);\r\n        }\r\n    }\r\n}","import React from \"react\";\r\n\r\nexport const MsgModal = ({ msg, onCloseModal }) => {\r\n\r\n    return (\r\n        <div className=\"msg-modal\">\r\n            <section className=\"modal-main flex column justify-center align-center\">\r\n                {msg}\r\n                <br/>\r\n                <button type=\"close-modal-button\" onClick={onCloseModal}>\r\n                    Close\r\n                </button>\r\n            </section>\r\n        </div>\r\n    );\r\n};","import React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { setDegree, setIsDarkMod } from '../actions/weatherActions'\r\nimport { MsgModal } from './MsgModal'\r\n\r\nexport function AppHeader() {\r\n    const { darkMod, error } = useSelector(state => state.weatherModule)\r\n    const [isDark, setIsDark] = useState(false)\r\n    const [C_or_F, setC_or_F] = useState('℃')\r\n    // const history = useHistory()\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(setDegree(C_or_F))\r\n    }, [C_or_F])\r\n    useEffect(() => {\r\n        dispatch(setIsDarkMod(isDark))\r\n    }, [isDark])\r\n\r\n    const setClassName = () => {\r\n        return darkMod ? 'main-layout app-header dark' : 'main-layout app-header'\r\n    }\r\n    const onSetIsDark = () => {\r\n        if (isDark) {\r\n            document.querySelector('.weather-app').classList.remove('dark')\r\n        } else {\r\n            document.querySelector('.weather-app').classList.add('dark')\r\n        }\r\n        setIsDark(!isDark)\r\n    }\r\n    const degreeType = () => {\r\n        (C_or_F === '℃') ? setC_or_F('℉') : setC_or_F('℃')\r\n    }\r\n    return (\r\n        <header className={setClassName()}>\r\n            <nav className=\"main-nav flex space-between\">\r\n                {/* <button onClick={() => history.goBack()}>Back</button> */}\r\n                {isDark ? <button onClick={onSetIsDark}>Toggle light</button> :\r\n                    <button onClick={onSetIsDark}>Toggle Dark</button>}\r\n                <button onClick={degreeType}>{C_or_F}</button>\r\n                <div className=\"links flex space-between\">\r\n                    <Link to='/'> <img src=\"imgs/logo.png\" alt=\"\" />weather app</Link>\r\n                    <Link to='/favoritCities'>favorit cities</Link>\r\n                </div>\r\n            </nav>\r\n            {error && <MsgModal msg={error} />}\r\n        </header>\r\n    )\r\n}","import React, { useEffect, useState } from 'react'\r\n\r\nexport const CitySearch = ({ onSearch, onGetCityForecast }) => {\r\n    const [cityInput, setCity] = useState('')\r\n    const [cities, setCities] = useState(null)\r\n    let cityKey = ''\r\n\r\n    useEffect(async () => {\r\n        const optionalCities = await onSearch(cityInput)\r\n        setCities(optionalCities)\r\n    }, [cityInput])\r\n\r\n    const onSetCity = async (ev) => {\r\n        setCity(ev.target.value)\r\n    }\r\n    const getCityForecast = () => {\r\n        console.log('cities', cities);\r\n        onGetCityForecast(cities[0].Key)\r\n    }\r\n    return (\r\n        <div className=\"city-search flex align-center justify-center\">\r\n            <input type=\"text\" list=\"cities\" onChange={onSetCity} name=\"cityInput\"\r\n                value={cityInput} placeholder=\"search city\" />\r\n            {cities && <datalist id=\"cities\">\r\n                {cities.map((city) => {\r\n                    cityKey = city.key\r\n                    return <option key={city.Key} value={city.LocalizedName} />\r\n                }\r\n                )}\r\n            </datalist>}\r\n            <button onClick={getCityForecast}>Search</button>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\n\r\nexport function WeatherPreview({ day,degree,isDarkMode }) {\r\n\r\n    const getTemp = (min, max) => {\r\n        const avgTemp = '' + (min + max) / 2\r\n        return avgTemp.substr(0, 4)\r\n    }\r\n    \r\n    const getDate = () => {\r\n        const year = day.Date.substr(0, 4)\r\n        const month = day.Date.substr(5, 2)\r\n        const dateDey = day.Date.substr(8, 2)\r\n        const date = `${dateDey}-${month}-${year}`\r\n        return date\r\n    }\r\n\r\n    return (\r\n        <div className={`weather-preview ${isDarkMode()} flex column align-center justify-center`}>\r\n            <span>{getDate()}</span>\r\n            <br />\r\n            <div>\r\n                <span>\r\n                    {getTemp(day.Temperature.Minimum.Value, day.Temperature.Maximum.Value)}</span>\r\n                <span>{degree}</span>\r\n            </div>\r\n            <div>Day will be{day.Day.IconPhrase}</div>\r\n            <div>Night will be{day.Night.IconPhrase}</div>\r\n        </div>\r\n    )\r\n}","import { Card } from '@material-ui/core'\r\nimport React from 'react'\r\nimport { WeatherPreview } from './WeatherPreview.jsx'\r\n\r\nexport const WeatherList = ({ forecast, degree, isDarkMode }) => {\r\n\r\n    return (\r\n        <div className='wheather-list flex jastify-center align-center'>\r\n            {forecast.map(day => {\r\n                return <Card key={day.EpochDate} variant=\"outlined\" className=\"weather-preview-card\">\r\n                    <WeatherPreview day={day} degree={degree} isDarkMode={isDarkMode} /></Card>\r\n            })}\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useState } from 'react'\r\nimport { addCity, errorMsg, setCity, removeCity } from '../actions/weatherActions';\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { weatherService } from '../services/weatherService';\r\nimport { CitySearch } from '../cmps/CitySearch';\r\nimport { WeatherList } from '../cmps/WeatherList'\r\nimport { MsgModal } from '../cmps/MsgModal'\r\n\r\nexport const ForecastPage = () => {\r\n    const { favoritCities, cityKey, darkMod, degree, error } = useSelector(state => state.weatherModule)\r\n    const [forecast, setForecast] = useState('')\r\n    const [currentForecast, setCurrentForecast] = useState('')\r\n    const [cityName, setcityName] = useState('')\r\n    const dispatch = useDispatch()\r\n    let cityId\r\n\r\n    useEffect(() => {\r\n        if (cityKey === '') {\r\n            navigator.geolocation.getCurrentPosition(success, navigatorError)\r\n        } else {\r\n            onGetCityForecast(cityKey)\r\n        }\r\n    }, [])\r\n\r\n    const success = async (pos) => {\r\n        const lat = pos.coords.latitude\r\n        const lon = pos.coords.longitude\r\n        const city = await weatherService.getLatLanCoor(lat, lon)\r\n        setcityName(city.LocalizedName)\r\n        dispatch(setCity(city.cityKey))\r\n        await onGetCityForecast(city.Key)\r\n    }\r\n    const navigatorError = () => {\r\n        dispatch(setCity('215854'))\r\n        dispatch(errorMsg('there was an error to get location'))\r\n        console.log('there was an error to get location')\r\n    }\r\n    const isDarkMode = () => {\r\n        return darkMod ? 'dark' : ''\r\n    }\r\n    const onSearch = async (searchTerm) => {\r\n        return await weatherService.searchCityAutoComplete(searchTerm)\r\n    }\r\n    const onGetCityForecast = async (cityKey) => {\r\n        dispatch(setCity(cityKey))\r\n        const forecast5Day = await weatherService.get5DayForeCast(cityKey, degree)\r\n        const currentForecast = await weatherService.getCityCurrentCondition(cityKey)\r\n        const city = await weatherService.searchCityByCityKey(cityKey)\r\n        setCurrentForecast(currentForecast[0])\r\n        setForecast(forecast5Day.DailyForecasts)\r\n        setcityName(city.LocalizedName)\r\n    }\r\n    const getTemp = () => {\r\n        if (degree === '℃') {\r\n            return currentForecast.Temperature.Metric.Value\r\n        } else {\r\n            return currentForecast.Temperature.Imperial.Value\r\n        }\r\n    }\r\n    const onAddToFavorits = () => {\r\n        dispatch(addCity(cityKey))\r\n        dispatch(errorMsg('city added to favorits'))\r\n    }\r\n    const onDeleteCity = () => {\r\n        dispatch(removeCity(cityId))\r\n        dispatch(errorMsg('city removed'))\r\n    }\r\n    const isFavorit = () => {\r\n        return favoritCities.some(city => {\r\n            cityId = city._id\r\n            return city.cityKey === cityKey\r\n        })\r\n    }\r\n    const onCloseModal = () => {\r\n        dispatch(errorMsg(''))\r\n    }\r\n\r\n    return (\r\n        <section className=\"main-layout\">\r\n            <div className={`forecast-page ${isDarkMode()} flex column justify-center align-center`}>\r\n\r\n                <CitySearch onSearch={onSearch} onGetCityForecast={onGetCityForecast} />\r\n                {cityName && <h1>{cityName}</h1>}\r\n                {currentForecast && <span>{currentForecast.WeatherText}</span>}\r\n                {forecast && <span className=\"current-temp\">{getTemp()}{degree}</span>}\r\n                {forecast && <WeatherList forecast={forecast}\r\n                    isDarkMode={isDarkMode} degree={degree} darkMod={darkMod} />}\r\n                {isFavorit() ? <button className=\"btn-remove-from-favorit\"\r\n                    onClick={onDeleteCity}>delete city from favorits</button>\r\n                    : <button className=\"btn-add-to-favorit\"\r\n                        onClick={() => onAddToFavorits()}>add to favorit cities</button>}\r\n            </div>\r\n            {error && <MsgModal msg={error} onCloseModal={onCloseModal} />}\r\n        </section>\r\n    )\r\n}","import React, { useEffect, useState } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport function FavoritPreview({ favoritCity, onDeleteCity, onSetCity, isDarkMode, degree, darkMod }) {\r\n\r\n    const [temp, setTemp] = useState('')\r\n    const [unit, setUnit] = useState('')\r\n\r\n    useEffect(() => {\r\n        setTemp(getTemp())\r\n        setUnit(getUnit())\r\n    }, [degree])\r\n\r\n    const previewClicked = () => {\r\n        onSetCity(favoritCity.cityKey)\r\n    }\r\n    const removeCity = (ev) => {\r\n        ev.preventDefault()\r\n        onDeleteCity(favoritCity._id)\r\n    }\r\n    const getTemp = () => {\r\n        if (degree === '℃') {\r\n            return favoritCity.cityCurrentCondition[0].Temperature.Metric.Value\r\n        } else {\r\n            return favoritCity.cityCurrentCondition[0].Temperature.Imperial.Value\r\n        }\r\n    }\r\n    const getUnit = () => {\r\n        return degree === '℃' ? favoritCity.cityCurrentCondition[0].Temperature.Metric.Unit :\r\n            favoritCity.cityCurrentCondition[0].Temperature.Imperial.Unit\r\n    }\r\n    return (\r\n        <div className={`favorit-preview ${isDarkMode()} flex column align-center justify-center`} onClick={previewClicked}>\r\n            <Link to=\"/\" className=\"favorit-preview-link\">\r\n                <h1 className={`favorit-preview-h1 ${isDarkMode()}`}>{favoritCity.name}</h1>\r\n                <div className=\"favorit-preview-content flex column justify-center align-center\">\r\n                    <span className={`favorit-preview-span ${isDarkMode()}`}>\r\n                        {temp && <span>{temp}</span>}{temp && <span>{unit}</span>}\r\n                    </span>\r\n                    <span className={`favorit-preview-span ${isDarkMode()}`}>\r\n                        {favoritCity.cityCurrentCondition[0].WeatherText}\r\n                    </span>\r\n                    <button className=\"delete-btn\" onClick={(ev) => removeCity(ev)}>remove city</button>\r\n                </div>\r\n            </Link>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport { Card } from '@material-ui/core'\r\nimport { FavoritPreview } from './FavoritPreview.jsx'\r\n\r\nexport const FavoritList = ({ favoritCities, onDeleteCity, onSetCity, isDarkMode, degree, darkMod }) => {\r\n    if (!favoritCities || favoritCities.length === 0) return <div>There is no favorit cities</div>\r\n    return (\r\n        <div className='favorit-list flex align-center justify-center'>\r\n            {favoritCities.map(favoritCity => {\r\n                // const city = oncurrentCondition(favoritCityObj.cityKey)\r\n                return <Card key={favoritCity._id} variant=\"outlined\">\r\n                    < FavoritPreview favoritCity={favoritCity}\r\n                        onDeleteCity={onDeleteCity} onSetCity={onSetCity}\r\n                        isDarkMode={isDarkMode} degree={degree} darkMod={darkMod} />\r\n                </Card>\r\n            }\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { setCity, removeCity, errorMsg } from '../actions/weatherActions'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { FavoritList } from '../cmps/FavoritList'\r\nimport { MsgModal } from '../cmps/MsgModal'\r\n\r\nexport const FavoritCities = () => {\r\n    const { favoritCities, darkMod, degree, error } = useSelector(state => state.weatherModule)\r\n    const dispatch = useDispatch()\r\n\r\n    const isDarkMode = () => {\r\n        return darkMod ? 'dark' : ''\r\n    }\r\n    const onDeleteCity = (cityId => {\r\n        dispatch(removeCity(cityId))\r\n        dispatch(errorMsg('city removed'))\r\n    })\r\n    const onSetCity = (cityKey) => {\r\n        dispatch(setCity(cityKey))\r\n    }\r\n    const onCloseModal = () => {\r\n        dispatch(errorMsg(''))\r\n    }\r\n    return (\r\n        <div>\r\n            <section className='main-layout'>\r\n                <div className={`favorit-page ${isDarkMode()} flex column`}>\r\n                    {favoritCities &&\r\n                        <FavoritList\r\n                            favoritCities={favoritCities}\r\n                            onDeleteCity={onDeleteCity}\r\n                            onSetCity={onSetCity}\r\n                            isDarkMode={isDarkMode}\r\n                            degree={degree}\r\n                            darkMod={darkMod}\r\n                        />}\r\n                </div>\r\n                {error && <MsgModal msg={error} onCloseModal={onCloseModal} />}\r\n            </section>\r\n        </div>\r\n    )\r\n}","import React from \"react\"\r\nimport { useSelector } from \"react-redux\"\r\n\r\nexport function AppFooter() {\r\n  const { darkMod } = useSelector(state => state.weatherModule)\r\n  const setClassName = () => {\r\n    return darkMod ? 'app-footer dark' : 'app-footer'\r\n  }\r\n  return (\r\n    <footer className={setClassName()}>\r\n      <div className=\"flex justify-center align-center\">\r\n        Coffeerights 2020\r\n      </div>\r\n    </footer>\r\n  )\r\n}","// import logo from './logo.svg';\nimport './assets/main.scss';\nimport React from 'react';\nimport { Switch, Route } from 'react-router-dom'\nimport { AppHeader } from './cmps/AppHeader'\nimport { ForecastPage } from './pages/ForecastPage'\nimport { FavoritCities } from './pages/FavoritCities'\nimport { AppFooter } from './cmps/AppFooter'\nexport const App = () => {\n  return (\n    <div className=\"weather-app\">\n      <AppHeader />\n      <Switch>\n        <Route path=\"/favoritCities\" component={FavoritCities} />\n        <Route path=\"/\" component={ForecastPage} />\n      </Switch>\n      <AppFooter />\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","\r\nconst initialState = {\r\n    cityKey: '',\r\n    favoritCities: [],\r\n    currentForecast:'',\r\n    error: '',\r\n    darkMod:false,\r\n    degree:'℃',\r\n}\r\n\r\nexport function weatherReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case 'SET_CITY':\r\n            return {\r\n                ...state,\r\n                cityKey: action.cityKey\r\n            }\r\n        case 'SET_DARKMOD':\r\n            return {\r\n                ...state,\r\n                darkMod: action.isDark\r\n            }\r\n        case 'SET_DEGREE':\r\n            return {\r\n                ...state,\r\n                degree: action.degree\r\n            }\r\n        case 'SET_CURRENT_FORECAST':\r\n            return {\r\n                ...state,\r\n                currentForecast:  action.currentForecast\r\n            }\r\n        case 'ADD_CITY':\r\n            return {\r\n                ...state,\r\n                favoritCities: [...state.favoritCities, action.cityToSave]\r\n            }\r\n        case 'REMOVE_CITY':\r\n            return {\r\n                ...state,\r\n                favoritCities: state.favoritCities.filter(cityToRemove => {\r\n                    return cityToRemove._id !== action.cityId\r\n                })\r\n            }\r\n        case 'ERROR':\r\n            return {\r\n                ...state,\r\n                error: action.msg\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { createStore, applyMiddleware, combineReducers, compose } from 'redux';\nimport { HashRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\n\n// import * as serviceWorker from './serviceWorker';\nimport { weatherReducer } from './reducers/weatherReducer.js';\n\nconst rootReducer = combineReducers({\n  weatherModule: weatherReducer\n});\n\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)));\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}